
#selecting songs in a given user's library
Select s.song_id, s.name, s.plays, s.explicit, s.file_loc, s.album_id, s.duration, s.num
From user u, song s, in_library l
Where u.user_id = 'USER' and u.user_id = l.user_id and l.song_id = s.song_id

#selecting playlists of a given user
Select p.playlist_id, p.name, p.date_created, p.description, p.plays
From playlist p, user u, has_playlist hp
Where hp.user_id = 'USER' and hp.playlist_id = p.playlist_id

#selecting all of the users that a given user follows
Select u.user_id, u.name, u.email, u.password, u.date_of_birth
From user u, is_friend f
Where f.follower = 'USER'

#search query for Songs
Select s.song_id, s.name, s.plays, s.explicit, s.file_loc, s.album_id, s.duration, s.num
From song s
where s.name like '%SEARCH%' 

#search query for albums
Select s.song_id, s.name, s.plays, s.explicit, s.file_loc, s.album_id, s.duration, s.num
From song s, album a
where a.name like '%SEARCH%' ^ s.album_id = a.album_id

#search query for artists
Select s.song_id, s.name, s.plays, s.explicit, s.file_loc, s.album_id, s.duration, s.num
From song s, artist a
where a.name like '%SEARCH%' ^ a.artist_id = s.artist_id

#insert into playlist
insert into in_playlist (playlist_id, song_id, added_by)
values ('PLAYLIST','SONG','USER')

#insert into library
insert into in_library (user_id, song_id)
values ('USER','SONG')

#following someone
insert into is_friend(follower, folowing)
values ('USER', 'FRIEND')

#inserting a playlist
insert into has_playlist(user_id, playlist_id)
values('USER','PLAYLIST')

#delete from library
delete from in_library where song_id = 'SONG'

#delete from playlist
delete from in_playlist where song_id = 'SONG'

#delete following
delete from is_friend where following = 'FRIEND'

#selecting the songs in a given playlist
select s.name, s.explicit, s.duration, ar.name, al.name
from song s, artist ar, album al, playlist p, in_playlist ip, user u
where s.artist_id = ar.artist_id
  and s.album_id = al.album_id
  and p.playlist_id = ip.playlist_id
  and p.name = 'PLAYLIST'
  and s.song_id = ip.song_id
  and u.user_id = 'USER'

#select most recently played song
select user_id, current_song_id, times
from plays
order by times desc
limit 1

#update the currnent_song_id to the previous_song_id
update plays
set next_song_id = 'NEXT_SONG'
where user_id = 'USER'
  and current_song_id = 'CURRENT_SONG'
  and times = 'TIMES'

#selecting songs in the user's library but not in a specific playlist
Select s.song_id, s.name
from song s, in_library il, user u
where u.user_id = 'USER' and il.user_id = u.user_id and s.song_id = il.song_id and s.name not in (
select s2.name from user u2, song s2, in_playlist ip2, playlist p 
where ip2.playlist_id = p.playlist_id and s2.song_id = ip2.song_id and p.name = 'PLAYLIST' and u2.user_id = 'USER' )


#updating and inerting into plays
update plays
set next_song = 'SONG'
where current_song_id = (select current_song_id from plays p inner join user u on p.user_id = u.user_id where u.user_id = 'USER' order by times desc limit 1)

insert into plays(user_id, current_song_id, times)
values('USER', 'SONG', current_timestamp)


#selecting the 5 reccomended songs
select s.name, s.explicit ,s.duration, s.song_id, ar.name, al.name
from song s, artist ar, album al, user u, plays p
where s.artist_id = ar.artist_id
	and s.album_id = al.album_id
	and u.user_id = 'USER'
	and p.next_song_id = s.song_id
	and p.current_song_id = (select p.current_song_id
					from plays p
					order by times desc
					limit 1)
	and s.song_id not in (select s2.song_id 
				from song s2, in_library il, user u2 
				where s2.song_id = il.song_id
				and u2.user_id = 'USER'
				and u2.user_id = il.user_id)
group by s.song_id
order by count(p.next_song_id) desc
limit 5


#find playlist id
select p.playlist_id
from playlist p
where p.name = 'NAME' and p.user_id = 'USER'


